<template>
  <div>
    {{ count }}
    <ChildComp @increment="increaseCount" @decrement="decreaseCount" :counter="count"/>
  </div>
</template>
<script>
import ChildComp from "./ChildComp.vue";
export default {
  name: "ParentComp",
  components: { ChildComp },
  data() {
    return {
      count: 0,
    };
  },
  methods: {
    increaseCount() {
      this.count++;
    },
    decreaseCount() {
      this.count--;
    },
  },
};
</script>
<style></style>


Note
v.v.v.v.v.imp
why i should not use this.count = this.count++
Great question! It might look like this.count = this.count++ should increase the count, but there's a hidden behavior in JavaScript that causes it not to work the way you'd expect.

ðŸ§  The Sneaky Truth Behind this.count = this.count++
The ++ operator has two forms:

count++ â†’ post-increment (returns the original value before incrementing)

++count â†’ pre-increment (returns the value after incrementing)

When you write this.count = this.count++, here's what happens under the hood:

this.count++ increments the value of count, but returns the old value.

That old value is then assigned back to this.count.

So the increment is undone, and count stays the same!

âœ… What to use instead
To actually increment the value:

js
this.count++;      // Correct and preferred
Or if you like assigning explicitly:

js
this.count = this.count + 1; // Also fine
ðŸ“Œ TL;DR
this.count = this.count++ âžœ counter stays the same ðŸ˜¬

this.count++ âžœ counter goes up as expected âœ…
